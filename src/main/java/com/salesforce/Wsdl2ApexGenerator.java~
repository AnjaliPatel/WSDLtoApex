package com.salesforce.ide.wsdl2apex.core;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.*;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public class Wsdl2ApexGenerator {

	private static ArrayList<String> allClassNames;
	private static ArrayList<String> allClasses;
	private static Wsdl2Apex.AnalysisResult result;
	private static String wsdlString;
	private final static Logger LOGGER = Logger.getLogger(Wsdl2ApexGenerator.class.getName()); 
	private static FileHandler f;
	
	/**
	 * Gets the logger ready
	 */
	static{
		try {
			f = new FileHandler("error.log", false);
		} catch (SecurityException | IOException e) {
			e.printStackTrace();
		}
		Logger l = Logger.getLogger("");
		 f.setFormatter(new SimpleFormatter());
		 l.addHandler(f);
		 l.setLevel(Level.CONFIG);
	}
	
	/**
	 * @return an arraylist of all of the class names generated by parsing
	 */
	public ArrayList<String> getAllClassNames()
	{
		return allClassNames;
	}
	
	/**
	 * @return an arraylist of all of the classes generated by parsing
	 */
	public ArrayList<String> getAllClasses()
	{
		return allClasses;
	}
	
	/**
	 * @return a mapping between the namespace and the suggested name of the apex class
	 */
	public HashMap<String, String> getResultFromParse()
	{
		return result.getMapping();
	}
	
	/**
	 * Parses the wsdl file and stores the result
	 */
	private static void doParse()
	{
		try
		{
			//parse the wsdl
			result = new Wsdl2Apex().analyze(wsdlString);							
			String allMessages = new String();
			if(!result.isSuccess())
			{
				ArrayList<String> messages = new ArrayList<String>();
				messages = result.getMessages();
				for(String message : messages)
				{
					System.err.println(message);
					allMessages = allMessages + message + '\n';
				}
				throw new RuntimeException(allMessages);
			}
		}
		catch (Exception e)
		{
			LOGGER.log(Level.SEVERE, e.getMessage());
			System.err.println(e.getMessage());
			throw e;
		}
	}
	
	/**
	 * Converts the result from the parse into strings.
	 * It will generate a list of apex classes and a list of apex class names
	 * @param async
	 * @throws CalloutException
	 */
	private static void doGenerate(Boolean async) throws CalloutException
	{
		HashMap<String, String> inputMap = new HashMap<String, String>();
		//get the targetnamesapces
		inputMap = result.getMapping();												
		Wsdl2Apex wsdl2Apex = new Wsdl2Apex();
		HashMap<String, APackage> packageMap;
		allClassNames = new ArrayList<String>();
		allClasses = new ArrayList<String>();
		try
		{
			//generates the class
			packageMap = wsdl2Apex.generate(wsdlString, Wsdl2ApexOptions.newDefault(async).setPackageNamespaceMap(inputMap)); 
			//creates the class as a string
			allClasses = wsdl2Apex.generateApexClass(packageMap);				
			Iterator<String> j = packageMap.keySet().iterator();
			while(j.hasNext())
			{
				allClassNames.add(j.next().toString());
			}
		}

		catch(CalloutException e)
		{
			System.err.println("Failed to generate code");
			System.err.println(e.getMessage());
			LOGGER.log(Level.SEVERE, e.getMessage());
			throw e;
		}
		catch(Exception e)
		{
			System.err.println(e.getMessage());
			LOGGER.log(Level.SEVERE, e.getMessage());
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	/**
	 * Converts the generated class strings into files
	 * @param resultPath
	 * @throws IOException
	 */
	private static void generateFiles(String resultPath) throws IOException
	{
		try
		{
			Iterator<String> i = allClasses.iterator();
			Iterator<String> j = allClassNames.iterator();
			while(i.hasNext() && j.hasNext())
			{
				//writes the class into a file
				FileString.StringToFile(resultPath, i.next().toString(), j.next().toString());		
			}
		}
		catch(FileNotFoundException | UnsupportedEncodingException e)
		{
			System.err.println("Cannot find the file");
			LOGGER.log(Level.SEVERE, e.getMessage());
			throw e;
		}
	}
	
	/**
	 * Generate apex classes from the given wsdl file
	 * @param args: the path to the wsdl file, a boolean saying if you want async classes, and the path to the result files (optional)
	 * @throws RuntimeException
	 * @throws CalloutException
	 * @throws IOException
	 */
	public static void parseAndGenerate(String[] args) throws RuntimeException, CalloutException, IOException{
		String filePath = args[0];
		Boolean async;
		String resultPath = null;
		if(args.length == 2)
		{
			async = Boolean.parseBoolean(args[1]);
		}
		else if(args.length == 3)
		{
			resultPath = args[1];
			async = Boolean.parseBoolean(args[2]);
		}
		else
		{
			System.err.println("Must either contain the following 2 arguements: path to the wsdl file and whether you want an asynchronous class");
			System.err.println("or the following 3 arguements: path to the wsdl file, path to where you want to save the file (with a slash at the end), and whether you want an asynchronous class");
			LOGGER.log(Level.SEVERE, "Must either contain the following 2 arguements: path to the wsdl file and whether you want an asynchronous class "
					+ "or the following 3 arguements: path to the wsdl file, path to where you want to save the file (with a slash at the end), and whether you want an asynchronous class");
			throw new RuntimeException();
		}
		
		try
		{
			//get the wsdl in a stirng
			wsdlString = FileString.getStringFromFile(filePath);								
		}
		catch(FileNotFoundException e)
		{
			System.err.println("Cannot find the file");
			LOGGER.log(Level.SEVERE, e.getMessage());
			throw e;
		}
		doParse();
		doGenerate(async);
		if(args.length == 3)
		{
			generateFiles(resultPath);
		}
	}
	
	/**
	 * Parses the wsdl file.
	 * @param args: the wsdl file path
	 * @throws IOException
	 * @throws CalloutException
	 */
	public static void parse(String[] args) throws IOException, CalloutException{
		String filePath = args[0];

		if(args.length != 1)
		{
			System.err.println("You must provide only the wsdl file's path");
			LOGGER.log(Level.SEVERE, "You must provide only the wsdl file's path");
			throw new RuntimeException();
		}						
		
		try
		{
			//get the wsdl in a string
			wsdlString = FileString.getStringFromFile(filePath);								
		}
		catch(FileNotFoundException e)
		{
			System.err.println("Cannot find the file");
			LOGGER.log(Level.SEVERE, e.getMessage());
			throw e;
		}
		doParse();
	}
	
	/**
	 * Only use this class right after you use the parse() method.  Generates the classes
	 * from the parse result.
	 * @param args
	 * @throws CalloutException
	 * @throws IOException
	 */
	public static void generate(String[] args) throws CalloutException, IOException
	{
		Boolean async;
		String resultPath = null;
		if(args.length == 1)
			async = Boolean.parseBoolean(args[0]);
		else if(args.length == 2)
		{
			async = Boolean.parseBoolean(args[0]);
			resultPath = args[1];
		}
		else
		{
			System.err.println("Must supply the following inputs: all of the class names and whether you want an asynchronous class");
			System.err.println("or must supply the following inputs: all of the class names, whether you want an asynchronous class, and the result path (with a slash at the end");
			LOGGER.log(Level.SEVERE, "Must supply the following inputs: all of the class names and whether you want an asynchronous class" + 
			"or must supply the following inputs: all of the class names, whether you want an asynchronous class, and the result path (with a slash at the end");
			throw new RuntimeException();
		}
		
		doGenerate(async);
		if(resultPath != null)
		{	
			generateFiles(resultPath);
		}
	}
	public static void main(String[] args) throws IOException, CalloutException
	{
		parseAndGenerate(args);
	}
}

